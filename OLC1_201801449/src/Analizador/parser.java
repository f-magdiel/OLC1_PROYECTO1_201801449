
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Analizador.TError;
import Analizador.TLexemas;
import Analizador.TExpresiones;
import Analizador.TConjunto;
import App.App.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\003\005\000\002\003" +
    "\006\000\002\003\002\000\002\004\010\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\004\000" +
    "\002\007\003\000\002\007\004\000\002\007\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\004\000\002\011" +
    "\003\000\002\011\004\000\002\014\006\000\002\013\003" +
    "\000\002\013\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\015\005\000\002\016\007\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\005" +
    "\000\002\021\005\000\002\022\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\ufffe\042\004\001\002\000\010\003" +
    "\015\004\012\051\017\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\044\162\001\002\000" +
    "\012\003\015\004\012\011\142\051\017\001\002\000\006" +
    "\026\141\051\017\001\002\000\004\025\044\001\002\000" +
    "\012\003\ufff5\004\ufff5\011\ufff5\051\ufff5\001\002\000\006" +
    "\026\ufff2\051\ufff2\001\002\000\004\026\043\001\002\000" +
    "\012\003\ufffc\004\ufffc\011\ufffc\051\ufffc\001\002\000\004" +
    "\022\020\001\002\000\004\031\021\001\002\000\026\006" +
    "\023\013\026\014\024\017\035\020\025\023\030\032\031" +
    "\042\033\043\022\052\032\001\002\000\032\006\uffb6\013" +
    "\uffb6\014\uffb6\017\uffb6\020\uffb6\023\uffb6\026\uffb6\032\uffb6" +
    "\042\uffb6\043\uffb6\051\uffb6\052\uffb6\001\002\000\032\006" +
    "\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9\023\uffe9\026\uffe9" +
    "\032\uffe9\042\uffe9\043\uffe9\051\uffe9\052\uffe9\001\002\000" +
    "\032\006\uffea\013\uffea\014\uffea\017\uffea\020\uffea\023\uffea" +
    "\026\uffea\032\uffea\042\uffea\043\uffea\051\uffea\052\uffea\001" +
    "\002\000\032\006\uffb4\013\uffb4\014\uffb4\017\uffb4\020\uffb4" +
    "\023\uffb4\026\uffb4\032\uffb4\042\uffb4\043\uffb4\051\uffb4\052" +
    "\uffb4\001\002\000\032\006\uffe8\013\uffe8\014\uffe8\017\uffe8" +
    "\020\uffe8\023\uffe8\026\uffe8\032\uffe8\042\uffe8\043\uffe8\051" +
    "\uffe8\052\uffe8\001\002\000\032\006\uffef\013\uffef\014\uffef" +
    "\017\uffef\020\uffef\023\uffef\026\uffef\032\uffef\042\uffef\043" +
    "\uffef\051\uffef\052\uffef\001\002\000\032\006\uffb7\013\uffb7" +
    "\014\uffb7\017\uffb7\020\uffb7\023\uffb7\026\uffb7\032\uffb7\042" +
    "\uffb7\043\uffb7\051\uffb7\052\uffb7\001\002\000\032\006\uffb3" +
    "\013\uffb3\014\uffb3\017\uffb3\020\uffb3\023\uffb3\026\uffb3\032" +
    "\uffb3\042\uffb3\043\uffb3\051\uffb3\052\uffb3\001\002\000\032" +
    "\006\uffeb\013\uffeb\014\uffeb\017\uffeb\020\uffeb\023\uffeb\026" +
    "\uffeb\032\uffeb\042\uffeb\043\uffeb\051\uffeb\052\uffeb\001\002" +
    "\000\004\051\041\001\002\000\032\006\uffed\013\uffed\014" +
    "\uffed\017\uffed\020\uffed\023\uffed\026\uffed\032\uffed\042\uffed" +
    "\043\uffed\051\uffed\052\uffed\001\002\000\032\006\uffb5\013" +
    "\uffb5\014\uffb5\017\uffb5\020\uffb5\023\uffb5\026\uffb5\032\uffb5" +
    "\042\uffb5\043\uffb5\051\uffb5\052\uffb5\001\002\000\032\006" +
    "\uffec\013\uffec\014\uffec\017\uffec\020\uffec\023\uffec\026\uffec" +
    "\032\uffec\042\uffec\043\uffec\051\uffec\052\uffec\001\002\000" +
    "\032\006\023\013\026\014\024\017\035\020\025\023\030" +
    "\026\ufff0\032\031\042\033\043\022\051\ufff0\052\032\001" +
    "\002\000\032\006\uffee\013\uffee\014\uffee\017\uffee\020\uffee" +
    "\023\uffee\026\uffee\032\uffee\042\uffee\043\uffee\051\uffee\052" +
    "\uffee\001\002\000\004\044\042\001\002\000\032\006\uffe1" +
    "\013\uffe1\014\uffe1\017\uffe1\020\uffe1\023\uffe1\026\uffe1\032" +
    "\uffe1\042\uffe1\043\uffe1\051\uffe1\052\uffe1\001\002\000\012" +
    "\003\ufff3\004\ufff3\011\ufff3\051\ufff3\001\002\000\004\051" +
    "\046\001\002\000\014\003\uffe7\004\uffe7\011\uffe7\044\uffe7" +
    "\051\uffe7\001\002\000\004\022\047\001\002\000\004\031" +
    "\050\001\002\000\110\005\114\006\100\007\063\010\111" +
    "\011\070\012\053\013\051\014\105\015\062\016\113\017" +
    "\112\020\052\021\055\022\060\023\077\024\120\025\076" +
    "\026\115\027\101\030\057\031\064\032\117\033\110\034" +
    "\071\035\067\036\116\037\102\040\104\041\072\042\106" +
    "\043\074\044\056\046\073\047\075\050\054\001\002\000" +
    "\010\021\uffd1\026\uffd1\045\uffd1\001\002\000\010\021\uffcd" +
    "\026\uffcd\045\uffcd\001\002\000\010\021\uffd2\026\uffd2\045" +
    "\uffd2\001\002\000\010\021\uffda\026\uffda\045\136\001\002" +
    "\000\010\021\uffcc\026\uffcc\045\uffcc\001\002\000\010\021" +
    "\uffb9\026\uffb9\045\uffb9\001\002\000\010\021\uffc5\026\uffc5" +
    "\045\uffc5\001\002\000\010\021\uffcb\026\uffcb\045\uffcb\001" +
    "\002\000\010\021\uffd8\026\uffd8\045\134\001\002\000\010" +
    "\021\uffcf\026\uffcf\045\uffcf\001\002\000\010\021\uffd5\026" +
    "\uffd5\045\uffd5\001\002\000\010\021\uffc4\026\uffc4\045\uffc4" +
    "\001\002\000\006\021\uffe3\026\uffe3\001\002\000\006\021" +
    "\126\026\uffe4\001\002\000\010\021\uffc0\026\uffc0\045\uffc0" +
    "\001\002\000\010\021\uffd3\026\uffd3\045\uffd3\001\002\000" +
    "\010\021\uffc1\026\uffc1\045\uffc1\001\002\000\010\021\uffbc" +
    "\026\uffbc\045\uffbc\001\002\000\010\021\uffdb\026\uffdb\045" +
    "\124\001\002\000\010\021\uffba\026\uffba\045\uffba\001\002" +
    "\000\010\021\uffd9\026\uffd9\045\122\001\002\000\010\021" +
    "\uffc9\026\uffc9\045\uffc9\001\002\000\010\021\uffca\026\uffca" +
    "\045\uffca\001\002\000\010\021\uffd6\026\uffd6\045\uffd6\001" +
    "\002\000\010\021\uffc6\026\uffc6\045\uffc6\001\002\000\010" +
    "\021\uffbe\026\uffbe\045\uffbe\001\002\000\004\026\uffe5\001" +
    "\002\000\010\021\uffbd\026\uffbd\045\uffbd\001\002\000\010" +
    "\021\uffb8\026\uffb8\045\uffb8\001\002\000\010\021\uffbb\026" +
    "\uffbb\045\uffbb\001\002\000\004\026\121\001\002\000\010" +
    "\021\uffc2\026\uffc2\045\uffc2\001\002\000\010\021\uffd4\026" +
    "\uffd4\045\uffd4\001\002\000\010\021\uffce\026\uffce\045\uffce" +
    "\001\002\000\010\021\uffd0\026\uffd0\045\uffd0\001\002\000" +
    "\010\021\uffd7\026\uffd7\045\uffd7\001\002\000\010\021\uffc7" +
    "\026\uffc7\045\uffc7\001\002\000\010\021\uffbf\026\uffbf\045" +
    "\uffbf\001\002\000\010\021\uffc3\026\uffc3\045\uffc3\001\002" +
    "\000\010\021\uffc8\026\uffc8\045\uffc8\001\002\000\014\003" +
    "\uffe6\004\uffe6\011\uffe6\044\uffe6\051\uffe6\001\002\000\004" +
    "\047\123\001\002\000\004\026\uffdd\001\002\000\004\046" +
    "\125\001\002\000\004\026\uffdf\001\002\000\110\005\114" +
    "\006\100\007\063\010\111\011\070\012\053\013\051\014" +
    "\105\015\062\016\113\017\112\020\052\021\055\022\060" +
    "\023\077\024\120\025\076\026\115\027\101\030\057\031" +
    "\064\032\117\033\110\034\071\035\067\036\116\037\102" +
    "\040\104\041\072\042\106\043\074\044\056\046\132\047" +
    "\133\050\127\001\002\000\006\021\uffda\026\uffda\001\002" +
    "\000\006\021\uffd8\026\uffd8\001\002\000\006\021\uffe2\026" +
    "\uffe2\001\002\000\006\021\uffdb\026\uffdb\001\002\000\006" +
    "\021\uffd9\026\uffd9\001\002\000\102\005\114\006\100\007" +
    "\063\010\111\011\070\012\053\013\051\014\105\015\062" +
    "\016\113\017\112\020\052\021\055\022\060\023\077\024" +
    "\120\025\076\026\115\027\101\030\057\031\064\032\117" +
    "\033\110\034\071\035\067\036\116\037\102\040\104\041" +
    "\072\042\106\043\074\044\056\001\002\000\004\026\uffdc" +
    "\001\002\000\004\050\137\001\002\000\004\026\uffde\001" +
    "\002\000\006\026\ufff1\051\ufff1\001\002\000\012\003\ufff4" +
    "\004\ufff4\011\ufff4\051\ufff4\001\002\000\004\011\144\001" +
    "\002\000\012\003\ufffb\004\ufffb\011\ufffb\051\ufffb\001\002" +
    "\000\004\011\145\001\002\000\004\011\146\001\002\000" +
    "\010\003\151\004\012\051\153\001\002\000\004\026\161" +
    "\001\002\000\012\003\151\004\012\044\ufffd\051\153\001" +
    "\002\000\004\026\157\001\002\000\012\003\ufffa\004\ufffa" +
    "\044\ufffa\051\ufffa\001\002\000\004\025\155\001\002\000" +
    "\012\003\ufff8\004\ufff8\044\ufff8\051\ufff8\001\002\000\004" +
    "\052\156\001\002\000\004\026\uffe0\001\002\000\012\003" +
    "\ufff6\004\ufff6\044\ufff6\051\ufff6\001\002\000\012\003\ufff9" +
    "\004\ufff9\044\ufff9\051\ufff9\001\002\000\012\003\ufff7\004" +
    "\ufff7\044\ufff7\051\ufff7\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\003\004\001\001\000\016\004\006\005" +
    "\007\010\015\011\010\014\013\015\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\142\011\010\014\013\015\012\001\001\000\004\014\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\026\013\036\021\035\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\037\021\035\023\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\106\020" +
    "\065\024\102\025\064\026\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\130\026\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\147\007\151\015\153\022\146\001\001\000\002" +
    "\001\001\000\010\007\157\015\153\022\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\162" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public LinkedList<TError> TablaErrorSintactico = new LinkedList<TError>();
    public LinkedList<TExpresiones> TablaExpresion = new LinkedList<TExpresiones>();
    public LinkedList<TConjunto> TablaConjunto = new LinkedList<TConjunto>();
    public LinkedList<TLexemas> TablaLexema = new LinkedList<TLexemas>();

    //VARIABLES QUE RECUPERAN LAS EXPRESIONES
    public String concatenaconjunto ="";
    public String concatenaexpresion="";

    //metodo para algun error sintactico
    public void syntax_error (Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
    
        System.out.println("!Error Sintactico Recuperado!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError errores = new TError(lexema,fila,columna,"Error Sintactico","Caracter No Esperado");
        TablaErrorSintactico.add(errores);
    }

    //Metodo cuando ya no se recupera de los errores
    public void unrecovered_syntax_error (Symbol s)throws java.lang.Exception{
    
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
    
        System.out.println("!!!!!!Error sintactico, panic mode!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError errores = new TError(lexema,fila,columna,"Error Sintactico","Caracter No Esperado");
        TablaErrorSintactico.add(errores);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= llaveizq PROGRAM llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= llaveizq PROGRAM llaveder EOF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= EXPRESIONES porcentaje porcentaje porcentaje porcentaje VALIDACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPRESIONES ::= DEFINICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESIONES ::= EXPRESIONES DEFINICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALIDACIONES ::= EVALUACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALIDACIONES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALIDACIONES ::= VALIDACIONES EVALUACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALIDACIONES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EVALUACION ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVALUACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EVALUACION ::= COMPROBACION ptocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVALUACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EVALUACION ::= error ptocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVALUACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICION ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFINICION ::= EXPRESIONREGULAR ptocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFINICION ::= error ptocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONREGULAR ::= ERDEFINICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONREGULAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESIONREGULAR ::= EXPRESIONREGULAR ERDEFINICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONREGULAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ERDEFINICION ::= identificador guion mayorque EXPRESION 
            {
              Object RESULT =null;
		int nameErleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameErright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nameEr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            concatenaexpresion = concatenaexpresion.replace("\\\"","\"\\\"\"").replace("\\n","\"\\n\"").replace("\\\'","\"\\\'\"");
            TExpresiones expresion = new TExpresiones (nameEr,concatenaexpresion);
            TablaExpresion.add(expresion);
            System.out.println("ER: " + nameEr + "DEF: "+ concatenaexpresion );
            concatenaexpresion="";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERDEFINICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= ER 
            {
              Object RESULT =null;
		int erdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object erdef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaexpresion+=erdef;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION ER 
            {
              Object RESULT =null;
		int erdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object erdef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaexpresion+=erdef;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ER ::= SIMBOLOER 
            {
              Object RESULT =null;
		int erdef1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdef1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object erdef1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = erdef1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ER ::= IDCONJUNTO 
            {
              Object RESULT =null;
		int erdef2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdef2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object erdef2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = erdef2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ER ::= cadenasc 
            {
              Object RESULT =null;
		int erdef3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdef3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String erdef3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= erdef3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ER ::= nuevalinea 
            {
              Object RESULT =null;
		int erdef3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdef3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String erdef3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= erdef3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ER ::= comdob 
            {
              Object RESULT =null;
		int erdef3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdef3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String erdef3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= erdef3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ER ::= comsimp 
            {
              Object RESULT =null;
		int erdef3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erdef3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String erdef3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= erdef3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONJUNTO ::= conj doblepto DEFINICIONCONJ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFINICIONCONJ ::= identificador guion mayorque ASIGNACIONCONJ ptocoma 
            {
              Object RESULT =null;
		int nameConjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameConjright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nameConj = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int defconjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defconjright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defconj = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            System.out.println("CONJ: "+nameConj+" DEF: "+concatenaconjunto);
            TConjunto conjunto = new TConjunto (nameConj,concatenaconjunto);
            TablaConjunto.add(conjunto);
            concatenaconjunto="";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONCONJ",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACIONCONJ ::= INTERVALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONCONJ",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACIONCONJ ::= LISTADEVALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONCONJ",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTADEVALORES ::= CARACTER 
            {
              Object RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object charr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaconjunto+= charr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADEVALORES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTADEVALORES ::= LISTADEVALORES coma CARACTER 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int charrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object charr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaconjunto+= com+charr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADEVALORES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IDCONJUNTO ::= llaveizq identificador llaveder 
            {
              Object RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= la + idc + lc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDCONJUNTO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMPROBACION ::= identificador doblepto cadenasc 
            {
              Object RESULT =null;
		int namevalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int namevalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nameval = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lexemvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexemvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexemval = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("VAL: "+nameval+" DEF: "+lexemval.substring(1,lexemval.length()-1));
                    TLexemas lexe = new TLexemas(nameval,lexemval.substring(1,lexemval.length()-1));
                    TablaLexema.add(lexe);
               
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPROBACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INTERVALO ::= entero rango entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String union = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaconjunto+= a+union+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERVALO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INTERVALO ::= minus rango minus 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String union = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaconjunto+= a+union+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERVALO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INTERVALO ::= mayus rango mayus 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String union = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaconjunto+= a+union+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERVALO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INTERVALO ::= SIMBOLOCONJ rango SIMBOLOCONJ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String union = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		concatenaconjunto+= a+union+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERVALO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CARACTER ::= entero 
            {
              Object RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= charr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTER ::= minus 
            {
              Object RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= charr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTER ::= mayus 
            {
              Object RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= charr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CARACTER ::= SIMBOLOCONJ 
            {
              Object RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object charr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= charr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMBOLOCONJ ::= admiracion 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIMBOLOCONJ ::= comdob 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIMBOLOCONJ ::= numeral 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIMBOLOCONJ ::= dolar 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIMBOLOCONJ ::= porcentaje 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIMBOLOCONJ ::= ampersand 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIMBOLOCONJ ::= comsimp 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIMBOLOCONJ ::= parizq 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIMBOLOCONJ ::= parder 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIMBOLOCONJ ::= asterisco 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIMBOLOCONJ ::= suma 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIMBOLOCONJ ::= coma 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIMBOLOCONJ ::= guion 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIMBOLOCONJ ::= punto 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIMBOLOCONJ ::= doblepto 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SIMBOLOCONJ ::= diagonal 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SIMBOLOCONJ ::= ptocoma 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SIMBOLOCONJ ::= menorque 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SIMBOLOCONJ ::= igual 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SIMBOLOCONJ ::= mayorque 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SIMBOLOCONJ ::= interrogacion 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SIMBOLOCONJ ::= arroba 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SIMBOLOCONJ ::= corcheteizq 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SIMBOLOCONJ ::= diagonalinv 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SIMBOLOCONJ ::= corcheteder 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIMBOLOCONJ ::= potencia 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIMBOLOCONJ ::= guionbajo 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIMBOLOCONJ ::= apostrofe 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIMBOLOCONJ ::= llaveizq 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMBOLOCONJ ::= barra 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMBOLOCONJ ::= llaveder 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMBOLOCONJ ::= nuevalinea 
            {
              Object RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=simb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOCONJ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMBOLOER ::= punto 
            {
              Object RESULT =null;
		int charerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=charer;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIMBOLOER ::= barra 
            {
              Object RESULT =null;
		int charerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=charer;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIMBOLOER ::= asterisco 
            {
              Object RESULT =null;
		int charerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=charer;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIMBOLOER ::= suma 
            {
              Object RESULT =null;
		int charerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=charer;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIMBOLOER ::= interrogacion 
            {
              Object RESULT =null;
		int charerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=charer;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
